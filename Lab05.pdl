#***************************************************************
#  Developer:         Michael Villarreal
#  Program #:         Lab 5
#  File Name:         Lab05.pdl
#  Course:            COSC 1336 Programming Fundamentals I
#  Due Date:          10-24-2023
#  Instructor:        Onabajo
#
# Program to build and manipulate matrices
# It will use functions to load, multiply matrices
# also compute summation, smallest, and print all matrices
#***************************************************************


#***************************************************************
#  Function:     main
#  Description:  orchestrate file ingestion and procesing
#  Parameters:   none
#  Returns:      final report to screen and file
#**************************************************************
global variables
set sumx=0
set sumy=0

begin main
    matrix declaration
    set x[5][3], y[3][7], z[5][7]
    set x=[[0,0,0],
       [0,0,0],
       [0,0,0],
       [0,0,0],
       [0,0,0]]
    
    set y=[[0,0,0,0,0,0,0],
       [0,0,0,0,0,0,0],
       [0,0,0,0,0,0,0]]
    
    set z=[[0,0,0,0,0,0,0],
       [0,0,0,0,0,0,0],
       [0,0,0,0,0,0,0],
       [0,0,0,0,0,0,0],
       [0,0,0,0,0,0,0]]
    
    variable declaration
    set x_file='Lab05_x.txt'
    set y_file='Lab05_y.txt'
    set outfile='Lab05.out'

    call function
    set x load_any(x_file,x,True)
    set y load_any(y_file,y,False)
    compute z based on x and y by computez(x,y,z)
    outpute to file and screen by outdata(outfile,x,y,z)

    hold screen wait for input
end main

#***************************************************************
#  Function:     get_dimensions
#  Description:  provided a matrix, calculate the overall dimensions
#   for use in loops or calculations
#  Parameters:   matrix
#  Returns:      matrix dimensions
#**************************************************************
function get_dimensions(matrix)
    accept matrix
    set counters
    set x=0 
    set y=0
    
    loop through matrix
    for each row
        increment counter x by 1
        set y by length of row

    return dimensions as (x,y)
end get_dimensions

#***************************************************************
#  Function:     computez
#  Description:  given the populated x-y matrix multiply the 
#   two to output completed z matrix
#  Parameters:   x-y matrix to evalute and empty z matrix
#  Returns:      None but z matrix populated
#**************************************************************
function computez(x,y,z)
    accept 3 matrix
    
    loop for each row in x
        loop for each column in y
            loop for each row in y
                set z value based on product of x and y
end computez

#***************************************************************
#  Function:     summation
#  Description:  given the associated row/column calculate the
#   the summary value
#  Parameters:   matrix to evalute, row or column to evaluate,
#   and row/column identity to evaluate
#  Returns:      return the calculated sum value
#**************************************************************
function summation(matrix,rc,num):
    set variables
    accept matrix
    accept identifier r=row and c=column (rc)
    accept row/column number starting with 0 (num)
    set counters
    set sum_row=0
    set sum_col=0

    for column summary
    if identifier is 'c'       
        for each row in matrix:
            add value from column (num) to sum_col
        return sum_col
    
    for row summary
    if identifier is 'r'
        for each value in row (num) of matrix
            add value to sum_row
        return sum_row            
end summation

#***************************************************************
#  Function:     smallest
#  Description:  given the associated row/column calculate the
#   the smallest value
#  Parameters:   matrix to evalute, row or column to evaluate,
#   and row/column identity to evaluate
#  Returns:      return the calculated smallest value
#**************************************************************
function smallest(matrix,rc,num):
    set variables
    accept matrix
    accept identifier r=row and c=column (rc)
    accept row/column number starting with 0 (num)
    set counters
    set small=0
    set small_matrix=[]

    generate subset of matrix column
    if identifier is 'c'        
        for each row in matrix:
            pass value to small_matrix based on num value provided
    
    generate subset of matrix row
    if identifier is 'r'
        for each value in row (num) of matrix
            append value to small_matrix)

    set counter
    set k0=0
    evaluate list to identify smallest
    for each value in small_matrix
        initialize value with 1st entry:
            set small=first value in list
        all others are compared to small 
            compare new value from list to small:
                set small to the smallest of the 2 compared
        increment counter by 1 (k0)
    return smallest value
end smallest

#***************************************************************
#  Function:     print_matrix
#  Description:  Supply a populated matrix and generate a report
#   ready output for screen and file
#  Parameters:   matrix title, matrix, width or spacing between
#   variables. Allows for spacing adjustments for larger variables
#  Returns:      populated matrix with header
#**************************************************************
function print_matrix(title,matrix,width):
    accept title for table haeding
    accept matrix
    accept wide of values in characters 
    
    calculate width of matrix to build a header to match
    identify the width of the matrix

    set how_wide to product of columns by desired width plus 1
    plus 1 accounts for spacing between values

    generate a string for output to screen and file
    initialize report=''
    add header to report
    for each row in matrix
        for each value
            append value to report
        new line for each row
    add footer to report
    add spaces to report

    return completed report
end print_matrix

#***************************************************************
#  Function:     outdata
#  Description:  calculate summary, generate report for screen
#   and file output, output to file and screen
#  Parameters:   output file, x-y-z matrix tables
#  Returns:      None
#**************************************************************
function outdata(outfile,x,y,z)
    accept filename of output file
    accept completed x, y, and z matrix
    
    call functions to calculate summary data
    set sumx to sum of column 2 of matrix x
    set sumy to sum of row 2 of matrix y
    set small to smallest value of row 1 from column y

    call functions to build report output
    initialize report=''
    append to report table with header ans matrix x allowing for 3 characters of spacing
    append to report table with header ans matrix y allowing for 3 characters of spacing
    append to report table with header ans matrix z allowing for 5 characters of spacing

    append summary information to report
    SUM X with value from sumx
    SUM Y with value from sumy
    SUMX + SUMY with value from sumx+sumy
    SMALLEST with value from small

    append signature to report
    3 blank lines
    append developerInfo

    output to file
    open outfile for writing
    write report to outfile
    close outfile

    print report to screen
end outdata

#***************************************************************
#  Function:     load_any
#  Description:  open input file and populate the provided matrix
#   given the format for loading row-wise vs column-wise
#  Parameters:   input filename, matrix to populate, orientation 
#   for loading matrix
#  Returns: fully populated matrix     
#**************************************************************
function load_any(file,matrix,rc_based)
    accept file name
    accept matrix to populate with data from file
    accept how the marix will be populated (rc_based)
    if rc_based 'True' is row based column-wise
    if rc_based 'False' is col based row-wise

    open input file
    set infile=open(file,'r')

    call function to retrieve matrix dimensions for use in loops
    set r to row count of matrix
    set c to column count of matrix

    retrieve data from input file
    set temp_list from first row of file
    remove new line characters and based on ',' delimeter

    populate matrix with data from temp_list
    reset counters
    set k=0
 
    for column-wise based matrix
    if rc_based is True
        loop for each row
            loop for each column
                set value in cell with value from temp_list
    
    for row-wise based matrix
    if rc_based is False
        loop for each column
            loop for each row
                set value in cell with value from temp_list

    close input file
    return matrix
 nd load_any


# Call the main function.
if __name__ == '__main__':
    main()